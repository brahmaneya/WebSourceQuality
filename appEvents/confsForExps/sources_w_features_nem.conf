deepdive {

  db.default {
    driver: "org.postgresql.Driver"
    url: "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME} # "
    user: ${PGUSER}
    password: ${PGPASSWORD}
    dbname: ${DBNAME}
    host: ${PGHOST}
    port: ${PGPORT}
    features:false
  }

  # Put your variables here
  schema.variables {
    event_truth.is_true: Boolean
    source_event_truth.is_true: Boolean
  }

  # Put your extractors here
  extraction.extractors {

    # Extractor 1: Clean output tables of all extractors
    ext_clear_table {
      style: "sql_extractor"
      sql: """
        DELETE FROM event_truth;
        DELETE FROM source_event_truth;
        """
    }

    ext_event_truth {
      style: "sql_extractor"
      sql: """
        INSERT INTO event_truth
        SELECT geid, is_true
        FROM event_input
        """
      dependencies: ["ext_clear_table"]
    }
          
    ext_source_event_truth_pos {
      style: "sql_extractor"
      sql: """
        INSERT INTO source_event_truth
        SELECT source_id, geid, true
        FROM eventPosVotes
        """
      dependencies: ["ext_clear_table"]
    }

    ext_source_event_truth_neg {
      style: "sql_extractor"
      sql: """
        INSERT INTO source_event_truth
        SELECT source_id, geid, false
        FROM eventNegVotes
        """
      dependencies: ["ext_clear_table"]
    }
  }

  inference.factors: {

    f_source_event_feature_equal {
      input_query: """
        SELECT event_truth.id as "event_truth.id",
          source_event_truth.id as "source_event_truth.id",
          event_truth.is_true as "event_truth.is_true",
          source_event_truth.is_true as "source_event_truth.is_true",
          source_event_truth.source_id AS "source_event_truth.source_id",
          source_features.feature AS "source_features.feature"
          FROM  source_event_truth,source_features,
                event_truth
        WHERE   source_event_truth.geid = event_truth.geid
          AND source_event_truth.source_id = source_features.source_id          
      """
      function: "Equal(source_event_truth.is_true, event_truth.is_true)"
      weight: "?(source_features.feature)"
    }

   f_source_event_feature_equal_init {
      input_query: """
        SELECT event_truth.id as "event_truth.id",
          source_event_truth.id as "source_event_truth.id",
          event_truth.is_true as "event_truth.is_true",
          source_event_truth.is_true as "source_event_truth.is_true",
          source_event_truth.source_id AS "source_event_truth.source_id",
          source_features.feature AS "source_features.feature"
          FROM  source_event_truth,source_features,
                event_truth
        WHERE   source_event_truth.geid = event_truth.geid
          AND source_event_truth.source_id = source_features.source_id
      """
      function: "Equal(source_event_truth.is_true, event_truth.is_true)"
      weight: "0.1"
    }

 }     

  # # An example of how to use the last factor graph:
  # pipeline.relearn_from: ${DEEPDIVE_HOME}"/out/2014-04-19T190341/"

  # # Default is to use the full pipeline, equivalent to:
   pipeline.run: "sourcesonly"
   pipeline.pipelines.sourcesonly: [
     "ext_clear_table",
     "ext_event_truth",     
     "ext_source_event_truth_pos",
     "ext_source_event_truth_neg",          
     "f_source_event_feature_equal",
     "f_source_event_feature_equal_init"
     ]        

  # # Specify a holdout fraction to hold out randomly  
  calibration.holdout_fraction: 0.4
  calibration.observation_query: "INSERT INTO dd_graph_variables_observation SELECT id FROM source_event_truth"
  
  sampler.sampler_cmd: "sampler-dw-naiveEMRand gibbs"
  sampler.sampler_args: "-n 20 -l 1000 -s 1 -i 1000 --alpha 0.1 --diminish 0.99 -b 0.1 --reg1_param 5"
}
