deepdive {

  db.default {
    driver: "org.postgresql.Driver"
    url: "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME} # "
    user: ${PGUSER}
    password: ${PGPASSWORD}
    dbname: ${DBNAME}
    host: ${PGHOST}
    port: ${PGPORT}
  }

  # Put your variables here
  schema.variables {
    group_tuple_belief.is_true: Boolean
    tuple_truth.is_true: Boolean
    source_group_tuple_belief.is_true: Boolean
  }

  # Put your extractors here
  extraction.extractors {

    # Extractor 1: Clean output tables of all extractors
    ext_clear_table {
      style: "sql_extractor"
      sql: """
        DELETE FROM group_tuple_belief;
        DELETE FROM source_group_tuple_belief;
        DELETE FROM tuple_truth;
        DELETE FROM source_outputs;
        """
    }

    ext_source_outputs {
      style: "sql_extractor"
      sql: """
        INSERT INTO source_outputs
        SELECT source_id, tuple_id, source_id || '-' || tuple_id, is_true, NULL
        FROM source_outputs_input
        """
      dependencies: ["ext_clear_table"]
    }

    ext_tuple_truth {
      input: """
          SELECT  tuple_id
          FROM    source_outputs
          """
      output_relation: "tuple_truth"
      udf: ${APP_HOME}"/udf/ext_tuples.py"
      dependencies: ["ext_source_outputs"]
      style: "tsv_extractor"
    }

    # Full cross product between tuples and groups. Might get too large. Maybe we can deal with that by forming closed expressions for non-gold-standard tuples not outputted by any source in a group. Maybe that won't affect the weight learning stage. The tables after this one can get huge too, since they are derived from this. 
    ext_group_tuple_belief {
      style: "sql_extractor"
      sql: """
          INSERT INTO group_tuple_belief 
          SELECT  sg.group_id, tt.tuple_id, sg.group_id || '-' || tt.tuple_id, NULL, NULL 
          FROM tuple_truth tt,
               source_groups sg
          GROUP BY sg.group_id, tt.tuple_id, tt.is_true
          """
      dependencies: ["ext_tuple_truth"]
    }
    
    ext_group_tuple_belief_labelled_del {
      style: "sql_extractor"
      sql: """
          DELETE FROM group_tuple_belief 
          WHERE group_tuple_id IN (
            SELECT group_id || '-' || tuple_id
            FROM group_tuple_belief_input
          )
          """
      dependencies: ["ext_group_tuple_belief"]
    }
    
    ext_group_tuple_belief_labelled_add {
      style: "sql_extractor"
      sql: """
          INSERT INTO group_tuple_belief 
          SELECT  group_id, tuple_id, group_id || '-' || tuple_id, is_true, NULL 
          FROM group_tuple_belief_input
          """
      dependencies: ["ext_group_tuple_belief_labelled_del"]
    }
    
    ext_source_group_tuple_belief {
      style: "sql_extractor"
      sql: """
          INSERT INTO source_group_tuple_belief 
          SELECT  sg.source_id, sg.group_id, gtb.tuple_id, sg.source_id || '-' || sg.group_id || '-' || gtb.tuple_id, NULL, NULL
          FROM group_tuple_belief gtb,
               source_groups sg
          WHERE gtb.group_id = sg.group_id
          GROUP BY sg.source_id, sg.group_id, gtb.tuple_id, gtb.is_true
          """
      dependencies: ["ext_group_tuple_belief","ext_group_tuple_belief_labelled_add"]
    }
  
    ext_group_tuple_belief_temp {
      style: "sql_extractor"
      sql: """
          UPDATE group_tuple_belief 
          SET is_true = NULL
          WHERE group_tuple_id NOT IN (
            SELECT group_id || '-' || tuple_id
            FROM group_tuple_belief_input 
          )
          """
      dependencies: ["ext_source_group_tuple_belief"]
    }
    
    ext_source_outputs_false_pairs {
      style: "sql_extractor"
      sql: """
        INSERT INTO source_outputs
        SELECT sgtb.source_id, sgtb.tuple_id, sgtb.source_id || '-' || sgtb.tuple_id, false, NULL
        FROM source_group_tuple_belief sgtb
        LEFT OUTER JOIN source_outputs so
        ON sgtb.source_id = so.source_id
        AND sgtb.tuple_id = so.tuple_id
        WHERE so.is_true IS NULL
        """
      dependencies: ["ext_source_group_tuple_belief"]  
    }

  }

  inference.factors: {

    # We require developers to select: 
    #   - reserved "id" column, 
    #   - variable column, 
    #   - weight dependencies,
    # for variable tables.
    f_group_true_true_init {
      input_query: """
        SELECT  tuple_truth.id AS "tuple_truth.id",
                tuple_truth.is_true AS "tuple_truth.is_true", 
                group_tuple_belief.id AS "group_tuple_belief.id",
                group_tuple_belief.is_true AS "group_tuple_belief.is_true",
                group_tuple_belief.group_id AS "group_tuple_belief.group_id"
        FROM    tuple_truth, 
                group_tuple_belief
        WHERE   tuple_truth.tuple_id = group_tuple_belief.tuple_id
        """
      function: "And(tuple_truth.is_true,group_tuple_belief.is_true)"
      weight: "1"
    }

    f_group_true_true {
      input_query: """
        SELECT  tuple_truth.id AS "tuple_truth.id",
                tuple_truth.is_true AS "tuple_truth.is_true", 
                group_tuple_belief.id AS "group_tuple_belief.id",
                group_tuple_belief.is_true AS "group_tuple_belief.is_true",
                group_tuple_belief.group_id AS "group_tuple_belief.group_id"
        FROM    tuple_truth, 
                group_tuple_belief
        WHERE   tuple_truth.tuple_id = group_tuple_belief.tuple_id
        """
      function: "And(tuple_truth.is_true,group_tuple_belief.is_true)"
      weight: "?(group_tuple_belief.group_id)"
    }

    f_group_false_true_init {
      input_query: """
        SELECT  tuple_truth.id AS "tuple_truth.id",
                tuple_truth.is_true AS "tuple_truth.is_true", 
                group_tuple_belief.id AS "group_tuple_belief.id",
                group_tuple_belief.is_true AS "group_tuple_belief.is_true",
                group_tuple_belief.group_id AS "group_tuple_belief.group_id"
        FROM    tuple_truth, 
                group_tuple_belief
        WHERE   tuple_truth.tuple_id = group_tuple_belief.tuple_id
        """
      function: "And(tuple_truth.is_true,!group_tuple_belief.is_true)"
      weight: "0"
    }

    f_group_false_true {
      input_query: """
        SELECT  tuple_truth.id AS "tuple_truth.id",
                tuple_truth.is_true AS "tuple_truth.is_true", 
                group_tuple_belief.id AS "group_tuple_belief.id",
                group_tuple_belief.is_true AS "group_tuple_belief.is_true",
                group_tuple_belief.group_id AS "group_tuple_belief.group_id"
        FROM    tuple_truth, 
                group_tuple_belief
        WHERE   tuple_truth.tuple_id = group_tuple_belief.tuple_id
        """
      function: "And(tuple_truth.is_true,!group_tuple_belief.is_true)"
      weight: "?(group_tuple_belief.group_id)"
    }

    f_group_true_false_init {
      input_query: """
        SELECT  tuple_truth.id AS "tuple_truth.id",
                tuple_truth.is_true AS "tuple_truth.is_true", 
                group_tuple_belief.id AS "group_tuple_belief.id",
                group_tuple_belief.is_true AS "group_tuple_belief.is_true",
                group_tuple_belief.group_id AS "group_tuple_belief.group_id"
        FROM    tuple_truth, 
                group_tuple_belief
        WHERE   tuple_truth.tuple_id = group_tuple_belief.tuple_id
        """
      function: "And(!tuple_truth.is_true,group_tuple_belief.is_true)"
      weight: "0"
    }

    f_group_true_false {
      input_query: """
        SELECT  tuple_truth.id AS "tuple_truth.id",
                tuple_truth.is_true AS "tuple_truth.is_true", 
                group_tuple_belief.id AS "group_tuple_belief.id",
                group_tuple_belief.is_true AS "group_tuple_belief.is_true",
                group_tuple_belief.group_id AS "group_tuple_belief.group_id"
        FROM    tuple_truth, 
                group_tuple_belief
        WHERE   tuple_truth.tuple_id = group_tuple_belief.tuple_id
        """
      function: "And(!tuple_truth.is_true,group_tuple_belief.is_true)"
      weight: "?(group_tuple_belief.group_id)"
    }

    f_group_false_false_init {
      input_query: """
        SELECT  tuple_truth.id AS "tuple_truth.id",
                tuple_truth.is_true AS "tuple_truth.is_true", 
                group_tuple_belief.id AS "group_tuple_belief.id",
                group_tuple_belief.is_true AS "group_tuple_belief.is_true",
                group_tuple_belief.group_id AS "group_tuple_belief.group_id"
        FROM    tuple_truth, 
                group_tuple_belief
        WHERE   tuple_truth.tuple_id = group_tuple_belief.tuple_id
        """
      function: "And(!tuple_truth.is_true,!group_tuple_belief.is_true)"
      weight: "1"
    }

    f_group_false_false {
      input_query: """
        SELECT  tuple_truth.id AS "tuple_truth.id",
                tuple_truth.is_true AS "tuple_truth.is_true", 
                group_tuple_belief.id AS "group_tuple_belief.id",
                group_tuple_belief.is_true AS "group_tuple_belief.is_true",
                group_tuple_belief.group_id AS "group_tuple_belief.group_id"
        FROM    tuple_truth, 
                group_tuple_belief
        WHERE   tuple_truth.tuple_id = group_tuple_belief.tuple_id
        """
      function: "And(!tuple_truth.is_true,!group_tuple_belief.is_true)"
      weight: "?(group_tuple_belief.group_id)"
    }

    f_source_true_true_init {
      input_query: """
        SELECT  group_tuple_belief.id AS "group_tuple_belief.id",
                group_tuple_belief.is_true AS "group_tuple_belief.is_true",
                source_group_tuple_belief.id AS "source_group_tuple_belief.id",
                source_group_tuple_belief.is_true AS "source_group_tuple_belief.is_true", 
                source_group_tuple_belief.source_id AS "source_group_tuple_belief.source_id"
        FROM    group_tuple_belief, 
                source_group_tuple_belief
        WHERE   group_tuple_belief.tuple_id = source_group_tuple_belief.tuple_id
        AND     group_tuple_belief.group_id = source_group_tuple_belief.group_id
        """
      function: "And(group_tuple_belief.is_true,source_group_tuple_belief.is_true)"
      weight: "1"
    }

    f_source_true_true {
      input_query: """
        SELECT  group_tuple_belief.id AS "group_tuple_belief.id",
                group_tuple_belief.is_true AS "group_tuple_belief.is_true",
                source_group_tuple_belief.id AS "source_group_tuple_belief.id",
                source_group_tuple_belief.is_true AS "source_group_tuple_belief.is_true", 
                source_group_tuple_belief.source_id AS "source_group_tuple_belief.source_id"
        FROM    group_tuple_belief, 
                source_group_tuple_belief
        WHERE   group_tuple_belief.tuple_id = source_group_tuple_belief.tuple_id
        AND     group_tuple_belief.group_id = source_group_tuple_belief.group_id
        """
      function: "And(group_tuple_belief.is_true,source_group_tuple_belief.is_true)"
      weight: "?(source_group_tuple_belief.source_id)"
    }

    f_source_false_true_init {
      input_query: """
        SELECT  group_tuple_belief.id AS "group_tuple_belief.id",
                group_tuple_belief.is_true AS "group_tuple_belief.is_true",
                source_group_tuple_belief.id AS "source_group_tuple_belief.id",
                source_group_tuple_belief.is_true AS "source_group_tuple_belief.is_true", 
                source_group_tuple_belief.source_id AS "source_group_tuple_belief.source_id"
        FROM    group_tuple_belief, 
                source_group_tuple_belief
        WHERE   group_tuple_belief.tuple_id = source_group_tuple_belief.tuple_id
        AND     group_tuple_belief.group_id = source_group_tuple_belief.group_id
        """
      function: "And(group_tuple_belief.is_true,!source_group_tuple_belief.is_true)"
      weight: "0"
    }

    f_source_false_true {
      input_query: """
        SELECT  group_tuple_belief.id AS "group_tuple_belief.id",
                group_tuple_belief.is_true AS "group_tuple_belief.is_true",
                source_group_tuple_belief.id AS "source_group_tuple_belief.id",
                source_group_tuple_belief.is_true AS "source_group_tuple_belief.is_true", 
                source_group_tuple_belief.source_id AS "source_group_tuple_belief.source_id"
        FROM    group_tuple_belief, 
                source_group_tuple_belief
        WHERE   group_tuple_belief.tuple_id = source_group_tuple_belief.tuple_id
        AND     group_tuple_belief.group_id = source_group_tuple_belief.group_id
        """
      function: "And(group_tuple_belief.is_true,!source_group_tuple_belief.is_true)"
      weight: "?(source_group_tuple_belief.source_id)"
    }

    f_source_true_false_init {
      input_query: """
        SELECT  group_tuple_belief.id AS "group_tuple_belief.id",
                group_tuple_belief.is_true AS "group_tuple_belief.is_true",
                source_group_tuple_belief.id AS "source_group_tuple_belief.id",
                source_group_tuple_belief.is_true AS "source_group_tuple_belief.is_true", 
                source_group_tuple_belief.source_id AS "source_group_tuple_belief.source_id"
        FROM    group_tuple_belief, 
                source_group_tuple_belief
        WHERE   group_tuple_belief.tuple_id = source_group_tuple_belief.tuple_id
        AND     group_tuple_belief.group_id = source_group_tuple_belief.group_id
        """
      function: "And(!group_tuple_belief.is_true,source_group_tuple_belief.is_true)"
      weight: "0"
    }

    f_source_true_false {
      input_query: """
        SELECT  group_tuple_belief.id AS "group_tuple_belief.id",
                group_tuple_belief.is_true AS "group_tuple_belief.is_true",
                source_group_tuple_belief.id AS "source_group_tuple_belief.id",
                source_group_tuple_belief.is_true AS "source_group_tuple_belief.is_true", 
                source_group_tuple_belief.source_id AS "source_group_tuple_belief.source_id"
        FROM    group_tuple_belief, 
                source_group_tuple_belief
        WHERE   group_tuple_belief.tuple_id = source_group_tuple_belief.tuple_id
        AND     group_tuple_belief.group_id = source_group_tuple_belief.group_id
        """
      function: "And(!group_tuple_belief.is_true,source_group_tuple_belief.is_true)"
      weight: "?(source_group_tuple_belief.source_id)"
    }

    f_source_false_false_init {
      input_query: """
        SELECT  group_tuple_belief.id AS "group_tuple_belief.id",
                group_tuple_belief.is_true AS "group_tuple_belief.is_true",
                source_group_tuple_belief.id AS "source_group_tuple_belief.id",
                source_group_tuple_belief.is_true AS "source_group_tuple_belief.is_true", 
                source_group_tuple_belief.source_id AS "source_group_tuple_belief.source_id"
        FROM    group_tuple_belief, 
                source_group_tuple_belief
        WHERE   group_tuple_belief.tuple_id = source_group_tuple_belief.tuple_id
        AND     group_tuple_belief.group_id = source_group_tuple_belief.group_id
        """
      function: "And(!group_tuple_belief.is_true,!source_group_tuple_belief.is_true)"
      weight: "1"
    }

    f_source_false_false {
      input_query: """
        SELECT  group_tuple_belief.id AS "group_tuple_belief.id",
                group_tuple_belief.is_true AS "group_tuple_belief.is_true",
                source_group_tuple_belief.id AS "source_group_tuple_belief.id",
                source_group_tuple_belief.is_true AS "source_group_tuple_belief.is_true", 
                source_group_tuple_belief.source_id AS "source_group_tuple_belief.source_id"
        FROM    group_tuple_belief, 
                source_group_tuple_belief
        WHERE   group_tuple_belief.tuple_id = source_group_tuple_belief.tuple_id
        AND     group_tuple_belief.group_id = source_group_tuple_belief.group_id
        """
      function: "And(!group_tuple_belief.is_true,!source_group_tuple_belief.is_true)"
      weight: "?(source_group_tuple_belief.source_id)"
    }

    f_source_output_true {
      input_query: """
        SELECT  source_group_tuple_belief.id AS "source_group_tuple_belief.id",
                source_group_tuple_belief.is_true AS "source_group_tuple_belief.is_true", 
                source_group_tuple_belief.tuple_id AS "source_group_tuple_belief.tuple_id",
                source_group_tuple_belief.group_id AS "source_group_tuple_belief.group_id",
                source_group_tuple_belief.source_id AS "source_group_tuple_belief.source_id"
        FROM    source_outputs, 
                source_group_tuple_belief
        WHERE   source_outputs.tuple_id = source_group_tuple_belief.tuple_id
        AND     source_outputs.source_id = source_group_tuple_belief.source_id
        AND     source_outputs.is_true = true
        """
      function: "IsTrue(source_group_tuple_belief.is_true)"
      weight: "15" # Some constant corresponding to epsilon
    }

    f_source_output_false {
      input_query: """
        SELECT  source_group_tuple_belief.id AS "source_group_tuple_belief.id",
                source_group_tuple_belief.is_true AS "source_group_tuple_belief.is_true", 
                source_group_tuple_belief.tuple_id AS "source_group_tuple_belief.tuple_id",
                source_group_tuple_belief.group_id AS "source_group_tuple_belief.group_id",
                source_group_tuple_belief.source_id AS "source_group_tuple_belief.source_id"
        FROM    source_outputs, 
                source_group_tuple_belief
        WHERE   source_outputs.tuple_id = source_group_tuple_belief.tuple_id
        AND     source_outputs.source_id = source_group_tuple_belief.source_id
        AND     source_outputs.is_true = false
        """
      function: "IsTrue(!source_group_tuple_belief.is_true)"
      weight: "15" # Some constant corresponding to epsilon
    }

    # to add: probability terms for missing tuples. priors? how about tuple groups?
  }     

  # # An example of how to use the last factor graph:
  # pipeline.relearn_from: ${DEEPDIVE_HOME}"/out/2014-04-19T190341/"

  # # Default is to use the full pipeline, equivalent to:
   pipeline.run: "all"
   pipeline.pipelines.all: [
     "ext_clear_table",
     "ext_source_outputs",
     "ext_tuple_truth",
     "ext_group_tuple_belief",
     #"ext_group_tuple_belief_labelled_del",
     #"ext_group_tuple_belief_labelled_add",
     "ext_source_group_tuple_belief",
     "ext_source_outputs_false_pairs",
     #"ext_group_tuple_belief_temp",
     "f_group_true_true_init",
     "f_group_true_true",
     "f_group_true_false_init",
     "f_group_true_false",
     "f_group_false_true_init",
     "f_group_false_true",
     "f_group_false_false_init",
     "f_group_false_false",
     "f_source_true_true_init",
     "f_source_true_true",
     "f_source_true_false_init",
     "f_source_true_false",
     "f_source_false_true_init",
     "f_source_false_true",
     "f_source_false_false_init",
     "f_source_false_false",
     "f_source_output_true",
     "f_source_output_false"
     ]
   pipeline.pipelines.extractors: [
     "ext_clear_table",
     "ext_source_outputs",
     "ext_tuple_truth",
     "ext_group_tuple_belief",
     "ext_source_group_tuple_belief",
     "ext_source_outputs_false_pairs"
     ]

  # # Specify a holdout fraction to hold out randomly
   calibration.holdout_fraction: 0.2

  # A more scientific way is to hold out by sentence:
  #  calibration.holdout_query:"""
  #    DROP TABLE IF EXISTS holdout_sentence_ids CASCADE; 

  #    CREATE TABLE holdout_sentence_ids AS 
  #    SELECT sentence_id FROM sentences WHERE RANDOM() < 0.25;

  #    INSERT INTO dd_graph_variables_holdout(variable_id)
  #    SELECT id FROM has_spouse WHERE sentence_id IN
  #    (SELECT * FROM holdout_sentence_ids);
  #  """

  # You may also try tuning sampler arguments:
  sampler.sampler_args: "-l 1000 -s 1 -i 1000 --alpha 0.1 --diminish 0.99"

}
