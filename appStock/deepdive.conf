deepdive {

  db.default {
    driver: "org.postgresql.Driver"
    url: "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME} # "
    user: ${PGUSER}
    password: ${PGPASSWORD}
    dbname: ${DBNAME}
    host: ${PGHOST}
    port: ${PGPORT}
  }

  # Put your variables here
  schema.variables {
    stock_truth.is_true: Boolean
  }

  # Put your extractors here
  extraction.extractors {

    # Extractor 1: Clean output tables of all extractors
    ext_clear_table {
      style: "sql_extractor"
      sql: """
        DELETE FROM stock_truth;
        DELETE FROM source_stock_truth;
        """
    }

    ext_populate_stock_true {
      style: "sql_extractor"
      sql: """
        INSERT INTO stock_truth
        SELECT stock_symbol,stock_symbol || '-' || volume, true
        FROM stock_input
	WHERE is_true = 'true'
        """
      dependencies: ["ext_clear_table"]
    }

    ext_populate_stock_false {
      style: "sql_extractor"
      sql: """
        INSERT INTO stock_truth
        SELECT stock_symbol,stock_symbol || '-' || volume, false
        FROM stock_input
	WHERE is_true = 'false'
        """
      dependencies: ["ext_clear_table"]
    }

    ext_populate_stock_unlabeled {
      style: "sql_extractor"
      sql: """
        INSERT INTO stock_truth
        SELECT stock_symbol, stock_symbol || '-' || volume
        FROM stock_input
	WHERE is_true = 'N/A'
        """
      dependencies: ["ext_clear_table"]
    }
          
    ext_source_stock_truth_true {
      style: "sql_extractor"
      sql: """
        INSERT INTO source_stock_truth
        SELECT source_id, stock_symbol || '-' || stock_volume, is_true
        FROM source_stock_input
        """
      dependencies: ["ext_clear_table"]
    }

    ext_source_stock_truth_false {
      style: "sql_extractor"
      sql: """
	INSERT INTO source_stock_truth
	SELECT source_id, source_stock_input.stock_symbol || '-' || volume, false
	FROM source_stock_input, stock_input
	WHERE source_stock_input.stock_symbol = stock_input.stock_symbol
	  AND source_stock_input.stock_volume <> stock_input.volume
        """
      dependencies: ["ext_clear_table"]
    }

    ext_feature_source_counts {
      style: "sql_extractor"
      sql: """
        INSERT INTO feature_source_counts
        SELECT feature, count(*)
        FROM source_features
        GROUP BY feature
      """  
      dependencies: ["ext_clear_table"]
    }

    ext_feature_metadata {
      style: "sql_extractor"
      sql: """
        INSERT INTO feature_metadata
        SELECT feature, '{"source_count":' || count || ',feature_name:' || substring(substring(feature from '.+=') for (length(substring(feature from '.+=')) - 1)) || ',feature_value:' || substring(substring(feature from '=.+') from 2) || '}'
        FROM feature_source_counts
      """  
      dependencies: ["ext_feature_source_counts"]
    }
  }

  inference.factors: {

    # We require developers to select: 
    #   - reserved "id" column, 
    #   - variable column, 
    #   - weight dependencies,
    # for variable tables.
    f_source_stock_true {
      input_query: """
        SELECT  stock_truth.id AS "stock_truth.id",
		stock_truth.is_true AS "stock_truth.is_true",
                source_stock_truth.source_id AS "source_stock_truth.source_id"
        FROM    source_stock_truth, 
                stock_truth 
        WHERE   source_stock_truth.stock_tuple_id = stock_truth.stock_tuple_id
          AND	source_stock_truth.is_true = true
        """
      function: "IsTrue(stock_truth.is_true)"
      weight: "?(source_stock_truth.source_id)"
    }

    f_source_stock_false {
      input_query: """
        SELECT stock_truth.id AS "stock_truth.id",
               stock_truth.is_true AS "stock_truth.is_true",
               source_stock_truth.source_id AS "source_stock_truth.source_id"
        FROM   source_stock_truth,
               stock_truth
	WHERE  source_stock_truth.stock_tuple_id = stock_truth.stock_tuple_id
          AND  source_stock_truth.is_true = false
	"""
	function: "IsTrue(!stock_truth.is_true)"
	weight: "?(source_stock_truth.source_id)"
    }
  
    f_source_stock_true_init {
      input_query: """
        SELECT  stock_truth.id AS "stock_truth.id",
		stock_truth.is_true AS "stock_truth.is_true",
                source_stock_truth.source_id AS "source_stock_truth.source_id"
        FROM    source_stock_truth, 
                stock_truth 
        WHERE   source_stock_truth.stock_tuple_id = stock_truth.stock_tuple_id
          AND	source_stock_truth.is_true = true
        """
      function: "IsTrue(stock_truth.is_true)"
      weight: "1"
    }

    f_source_stock_false_init {
      input_query: """
        SELECT stock_truth.id AS "stock_truth.id",
               stock_truth.is_true AS "stock_truth.is_true",
               source_stock_truth.source_id AS "source_stock_truth.source_id"
        FROM   source_stock_truth,
               stock_truth
	WHERE  source_stock_truth.stock_tuple_id = stock_truth.stock_tuple_id
          AND  source_stock_truth.is_true = false
	"""
	function: "IsTrue(!stock_truth.is_true)"
	weight: "1"
    }
  
    f_stock_onetrue {
      input_query: """
        SELECT array_agg(stock_truth.id) AS "stock_truth.id",
	       array_agg(stock_truth.is_true) AS "stock_truth.is_true"
        FROM   stock_truth
	GROUP BY stock_truth.stock_symbol
        """
      function: "OneIsTrue(stock_truth.is_true)"
      weight: "5"
    }

    f_source_stock_feature_true {
      input_query: """
	SELECT  stock_truth.id AS "stock_truth.id",
               	stock_truth.is_true AS "stock_truth.is_true",
                source_stock_truth.source_id AS "source_stock_truth.source_id",
		source_features.feature AS "source_features.feature"
        FROM    source_stock_truth,source_features,
                stock_truth
        WHERE   source_stock_truth.stock_tuple_id = stock_truth.stock_tuple_id
	AND	source_stock_truth.source_id = source_features.source_id
	AND	source_stock_truth.is_true = true
        """
      function: "IsTrue(stock_truth.is_true)"
      weight: "?(source_features.feature)"
    }

    f_source_stock_feature_false {
      input_query: """
        SELECT  stock_truth.id AS "stock_truth.id",
                stock_truth.is_true AS "stock_truth.is_true",
                source_stock_truth.source_id AS "source_stock_truth.source_id",
                source_features.feature AS "source_features.feature"
        FROM    source_stock_truth,source_features,
                stock_truth
        WHERE   source_stock_truth.stock_tuple_id = stock_truth.stock_tuple_id
        AND     source_stock_truth.source_id = source_features.source_id
	AND	source_stock_truth.is_true = false
        """
      function: "IsTrue(!stock_truth.is_true)"
      weight: "?(source_features.feature)"
    }

    f_source_stock_feature_true_init {
      input_query: """
	SELECT  stock_truth.id AS "stock_truth.id",
               	stock_truth.is_true AS "stock_truth.is_true",
                source_stock_truth.source_id AS "source_stock_truth.source_id",
		source_features.feature AS "source_features.feature"
        FROM    source_stock_truth,source_features,
                stock_truth
        WHERE   source_stock_truth.stock_tuple_id = stock_truth.stock_tuple_id
	AND	source_stock_truth.source_id = source_features.source_id
	AND	source_stock_truth.is_true = true
        """
      function: "IsTrue(stock_truth.is_true)"
      weight: "0.1"
    }

    f_source_stock_feature_false_init {
      input_query: """
        SELECT  stock_truth.id AS "stock_truth.id",
                stock_truth.is_true AS "stock_truth.is_true",
                source_stock_truth.source_id AS "source_stock_truth.source_id",
                source_features.feature AS "source_features.feature"
        FROM    source_stock_truth,source_features,
                stock_truth
        WHERE   source_stock_truth.stock_tuple_id = stock_truth.stock_tuple_id
        AND     source_stock_truth.source_id = source_features.source_id
	AND	source_stock_truth.is_true = false
        """
      function: "IsTrue(!stock_truth.is_true)"
      weight: "0"
    }


 }     

  # # An example of how to use the last factor graph:
  # pipeline.relearn_from: ${DEEPDIVE_HOME}"/out/2014-04-19T190341/"

  # # Default is to use the full pipeline, equivalent to:
   pipeline.run: "han_features"
   #pipeline.run: "han"
   pipeline.pipelines.han: [
     "ext_clear_table",
     "ext_populate_stock_true",
     "ext_populate_stock_false",
     "ext_populate_stock_unlabeled",
     "ext_source_stock_truth_true",
     "ext_source_stock_truth_false",
     "ext_feature_source_counts",
     "ext_feature_metadata",
     "f_source_stock_true",
     "f_source_stock_false"
     "f_source_stock_true_init",
     "f_source_stock_false_init"
     ]
    pipeline.pipelines.han_features: [
     "ext_clear_table",
     "ext_populate_stock_true",
     "ext_populate_stock_false",
     "ext_populate_stock_unlabeled",
     "ext_source_stock_truth_true",
     "ext_source_stock_truth_false",
     "ext_feature_source_counts",
     "ext_feature_metadata",
     "f_source_stock_feature_true",
     "f_source_stock_feature_false"
     "f_source_stock_feature_true_init",
     "f_source_stock_feature_false_init",
     "f_stock_onetrue" 
     ]
    pipeline.pipelines.pos: [
     "ext_clear_table",
     "ext_labeled_tuple_truth",
     "ext_unlabeled_tuple_truth",
     "ext_source_outputs_input",
     "f_source_output_true",
     "f_source_output_false"
     ]
   pipeline.pipelines.extractors: [
     "ext_clear_table",
     "ext_labeled_tuple_truth",
     "ext_unlabeled_tuple_truth",
     "ext_source_books",#
     "ext_source_book_authors",#
     "ext_source_outputs_input",
     "ext_source_negations",#
     ]

  # # Specify a holdout fraction to hold out randomly
  calibration.holdout_fraction: 0.8 
  #calibration.holdout_query: "INSERT INTO dd_graph_variables_holdout(variable_id) SELECT id FROM stock_truth WHERE stock_symbol in (SELECT DISTINCT stock_symbol FROM stock_truth WHERE is_true is not NULL ORDER BY stock_symbol LIMIT 97)"
  # A more scientific way is to hold out by sentence:
  #  calibration.holdout_query:"""
  #    DROP TABLE IF EXISTS holdout_sentence_ids CASCADE; 

  #    CREATE TABLE holdout_sentence_ids AS 
  #    SELECT sentence_id FROM sentences WHERE RANDOM() < 0.25;

  #    INSERT INTO dd_graph_variables_holdout(variable_id)
  #    SELECT id FROM has_spouse WHERE sentence_id IN
  #    (SELECT * FROM holdout_sentence_ids);
  #  """

  # You may also try tuning sampler arguments:
  #sampler.sampler_args: "-l 1000 -s 1 -i 1000 --alpha 0.1 --diminish 0.99 -n 100"
  #sampler.sampler_cmd: "sampler-dw-new em"
  sampler.sampler_cmd: "sampler-dw-new-l1reg gibbs"
  sampler.sampler_args: "-n 20 -l 1000 -s 1 -i 1000 --alpha 0.1 --diminish 0.99 -b 0.0 --reg1_param 6"
}
